name: platforms-dispatches

on:
  # TODO schedule on final merge
  #schedule:
  #  - cron: '0 0 * * 0,3'
  workflow_dispatch:
  pull_request:

env:
  MIN_IDF_MAJOR_VERSION: ${{ vars.MIN_IDF_MAJOR_VERSION }}
  MIN_IDF_MINOR_VERSION: ${{ vars.MIN_IDF_MINOR_VERSION }}

jobs:
  build-wheels:
    name: Build for ${{ matrix.os }} (Python ${{matrix.python-version}})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
          - macos-latest-xlarge       # MacOS M1 GitHub beta runner - paid $0.16
          - linux-armv7-self-hosted
          - linux-arm64-self-hosted
        include:
          - os: linux-armv7-self-hosted
            CONTAINER: python:3.8-bullseye
          - os: linux-arm64-self-hosted
            CONTAINER: python:3.8-bullseye
        python-version: ['3.8']

    # Use python container on ARM
    container: ${{ matrix.CONTAINER }}

    steps:
      - name: OS info
        if: matrix.os != 'windows-latest'
        run: |
          echo "Operating System: ${{ runner.os }}"
          echo "Architecture: $(uname -m)"
      - name: OS info
        if: matrix.os == 'windows-latest'
        run: |
          echo "Operating System: ${{ runner.os }}"
          echo "Architecture: $env:PROCESSOR_ARCHITECTURE"


      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Setup Python
        # GitHub action for MacOS M1 does not have Python <= 3.10
        # Skip setting python on ARM because of missing compatibility: https://github.com/actions/setup-python/issues/108
        if: matrix.os != 'macos-latest-xlarge' && matrix.os != 'linux-armv7-self-hosted' && matrix.os != 'linux-arm64-self-hosted'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}


      - name: Setup Python - MacOS M1
        # Temporary solution until Python version for build will be >= 3.10 (GitHub action support)
        if: matrix.os == 'macos-latest-xlarge'
        run: |
          brew install python@3.8
          # change python symlink called with default command 'python'
          ln -s -f /opt/homebrew/bin/python3.8 /usr/local/bin/python


      - name: Get Python version
        run: |
          python --version
          python -m pip install --upgrade pip


      - name: Install build dependencies
        run: python -m pip install -r build_requirements.txt


      - name: Install additional OS dependencies - Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: os_dependencies/ubuntu.sh

      - name: Install additional OS dependencies - MacOS
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-latest-xlarge'
        run: os_dependencies/macos.sh

      - name: Install additional OS dependencies - Linux ARM
        if: matrix.os == 'linux-armv7-self-hosted' || matrix.os == 'linux-arm64-self-hosted'
        run: os_dependencies/linux_arm.sh


      - name: Build wheels for IDF
        if: matrix.os != 'windows-latest'
        run: |
          # Rust directory needs to be included for Linux ARM7
          if [ "${{ matrix.os }}" = "linux-armv7-self-hosted" ]; then
            . $HOME/.cargo/env
          fi

          python build_wheels.py

      - name: Build wheels for IDF - Windows
        if: matrix.os == 'windows-latest'
        run: |
          python build_wheels.py

      - name: Upload artifacts of downloaded_wheels directory
        uses: actions/upload-artifact@v4
        with:
          name: wheels-download-directory-${{ matrix.os}}-${{ matrix.python-version }}
          path: ./downloaded_wheels

      - name: Upload artifacts of Python version dependent wheels
        uses: actions/upload-artifact@v4
        with:
          name: dependent_requirements_${{ matrix.os}}
          path: ./dependent_requirements.txt


  build-python-version-dependent-wheels:
    needs: build-wheels
    name: Build Python version dependendent wheels for IDF
    uses: espressif/idf-python-wheels/.github/workflows/build-wheels-python-dependent.yml@feat/python_version_specific_wheels
    # TODO right branch to ref


  # upload-python-wheels:
  #   needs: [build-wheels, build-python-version-dependent-wheels]
  #   name: Upload Python wheels
  #   uses: espressif/idf-python-wheels/.github/workflows/upload-python-wheels.yml@feat/python_version_specific_wheels
  #   # TODO right branch to ref
  upload-python-wheels:
    needs: [build-wheels, build-python-version-dependent-wheels]
    name: Upload Python wheels
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_BUCKET: ${{ secrets.DL_BUCKET }}
      PREFIX: 'pypi'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: python -m pip install -r build_requirements.txt

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          #name: wheels-download-directory
          path: ./downloaded_wheels

      - name: Upload release asset to S3 bucket
        run: |
          python upload_wheels.py $AWS_BUCKET
          python create_index_pages.py $AWS_BUCKET
      - name: Drop AWS cache
        id: invalidate-index-cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CACHE_INVALIDATION }} --paths "/pypi/*"

      - name: Remove temporary directory
        run: rm -r downloaded_wheels
