name: platforms-dispatches

on:
  schedule:
    - cron: '0 0 * * 0,3'
  workflow_dispatch:
  pull_request:

env:
  MIN_IDF_MAJOR_VERSION: ${{ vars.MIN_IDF_MAJOR_VERSION }}
  MIN_IDF_MINOR_VERSION: ${{ vars.MIN_IDF_MINOR_VERSION }}

jobs:
  prepare-environment38:
    name: Prepare environment for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
          - macos-latest-xlarge       # MacOS M1 GitHub beta runner - paid $0.16
          - linux-armv7-self-hosted
          - linux-arm64-self-hosted
        include:
          - os: linux-armv7-self-hosted
            CONTAINER: python:3.8-bullseye
          - os: linux-arm64-self-hosted
            CONTAINER: python:3.8-bullseye
        python-version: ['3.8']

    # Use python container on ARM
    container: ${{ matrix.CONTAINER }}

    steps:
      - name: OS info
        if: matrix.os != 'windows-latest'
        run: |
          echo "Operating System: ${{ runner.os }}"
          echo "Architecture: $(uname -m)"
      - name: OS info
        if: matrix.os == 'windows-latest'
        run: |
          echo "Operating System: ${{ runner.os }}"
          echo "Architecture: $env:PROCESSOR_ARCHITECTURE"


      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Setup Python
        # GitHub action for MacOS M1 does not have Python <= 3.10
        # Skip setting python on ARM because of missing compatibility: https://github.com/actions/setup-python/issues/108
        if: matrix.os != 'macos-latest-xlarge' && matrix.os != 'linux-armv7-self-hosted' && matrix.os != 'linux-arm64-self-hosted'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}


      - name: Setup Python - MacOS M1
        # Temporary solution until Python version for build will be >= 3.10 (GitHub action support)
        if: matrix.os == 'macos-latest-xlarge'
        run: |
          brew install python@3.8
          # change python symlink called with default command 'python'
          ln -s -f /opt/homebrew/bin/python3.8 /usr/local/bin/python


      - name: Get Python version
        run: |
          python --version
          python -m pip install --upgrade pip

  instal-dependencies:
    needs: prepare-environment38
    name: Install dependencies for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install build dependencies
        run: python -m pip install -r build_requirements.txt


      - name: Install additional OS dependencies - Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          # PyGObject needs build dependecies https://pygobject.readthedocs.io/en/latest/getting_started.html
          sudo apt install libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-4.0 -y

          # dbus-python needs build dependecies
          sudo apt-get install cmake build-essential libdbus-1-dev libdbus-glib-1-dev -y


      - name: Install additional OS dependencies - MacOS
        if: matrix.os == 'macos-latest' || matrix.os == 'macos-latest-xlarge'
        run: |
          # PyGObject needs build dependecies https://pygobject.readthedocs.io/en/latest/getting_started.html
          brew install pygobject3 gtk4

          # MacOS M1 additional dependencies
          if [ "${{ matrix.os }}" == "macos-latest-xlarge" ]; then
            # Probably temporary fix for gdbgui==0.13.2.0 on MacOS M1 -> gevent==1.5.0 can't be build
            # The newest version of gevent with M1 support is installed and forced to be used for gdbgui
            # When requirement wheels are build gdbgui==0.13.2.0 is already built

            arch -arm64 python -m pip install 'cython<3'
            arch -arm64 python -m pip install 'cffi'
            arch -arm64 python -m pip install 'gevent'
            arch -arm64 python -m pip install 'gdbgui==0.13.2.0' --no-build-isolation
          fi


      - name: Install additional OS dependencies - Linux ARM7
        if: matrix.os == 'linux-armv7-self-hosted'
        run: |
          apt-get update

          # AWS
          apt-get install -y -q --no-install-recommends awscli

          # cryptography needs Rust
          curl https://sh.rustup.rs -sSf | bash -s -- --default-toolchain stable -y
          source $HOME/.cargo/env

          # PyGObject needs build dependecies https://pygobject.readthedocs.io/en/latest/getting_started.html
          apt-get install libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev -y

          # dbus-python build dependecies
          apt-get install libtiff5 libjpeg-dev libopenjp2-7 cmake libdbus-1-dev -y
          apt-get install -y --no-install-recommends python3-dev libdbus-glib-1-dev libgirepository1.0-dev libcairo2-dev -y
          apt-get install -y --no-install-recommends dbus-tests -y


      - name: Install additional OS dependencies - Linux ARM64
        if: matrix.os == 'linux-arm64-self-hosted'
        run: |
          apt-get update

          # AWS
          apt-get install -y -q --no-install-recommends awscli

          # PyGObject needs build dependecies https://pygobject.readthedocs.io/en/latest/getting_started.html
          apt-get install libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev -y

  build-wheels:
    needs: instal-dependencies
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Build wheels for IDF
        if: matrix.os != 'windows-latest'
        run: |
          # Rust directory needs to be included for Linux ARM7
          if [ "${{ matrix.os }}" == "linux-armv7-self-hosted" ]; then
            source $HOME/.cargo/env
          fi

          python build_wheels.py

      - name: Build wheels for IDF - Windows
        if: matrix.os == 'windows-latest'
        run: |
          python build_wheels.py

  upload-to-aws:
    needs: build-wheels
    name: Upload wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:

      - name: Upload release asset to S3 bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_BUCKET: ${{ secrets.DL_BUCKET }}
          PREFIX: 'pypi'
        shell: bash
        run: |
          python upload_wheels.py $AWS_BUCKET
          python create_index_pages.py $AWS_BUCKET


      - name: Drop AWS cache
        id: invalidate-index-cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CACHE_INVALIDATION }} --paths "/pypi/*"

      - name: Remove temporary directory
        run: rm -r downloaded_wheels
