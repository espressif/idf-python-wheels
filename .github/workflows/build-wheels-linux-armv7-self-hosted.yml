name: armv7-dispatch

on:
  # schedule:
  #    - cron: '0 0 * * 0,3'
  workflow_dispatch:
    inputs:
      IDF_branch:
        description: >
          Wheels will be built for this branch. This will
          be ignored if specific packages are listed bellow.
        type: string
        required: false
        default: 'master'
      packages:
        description: >
          Generate wheels for given packages separated by space.
          Requirement specifiers can be used.
          For example esptool~=4.5 esp-coredump~=1.2
        type: string
        required: false
  workflow_call:
    inputs:
      IDF_branch:
        description: >
          Wheels will be built for this branch. This will
          be ignored if specific packages are listed bellow.
        type: string
        required: false
        default: 'master'
      packages:
        description: >
          Wheels will be built for this branch. This will
          be ignored if specific packages are listed bellow.
          Generate wheels for given packages separated by space.
          Requirement specifiers can be used.
          For example esptool~=4.5 esp-coredump~=1.2
        type: string
        required: false

jobs:
  build-python-wheels:
    name: Build Python Wheels for linux-armv7
    runs-on: linux-armv7-self-hosted
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8.17', '3.9.17', '3.10.12', '3.11.4']
    container:
      image: ghcr.io/espressif/github-esp-dockerfiles/pyenv_rust_powershell:v2
      options: --privileged
    steps:
      - name: Prepare package list
        if: ${{ inputs.packages }}
        run: |
          echo "input packages: ${{ inputs.packages }}"
          PACKAGES=$(echo "${{ inputs.packages }}" |
                     sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/\([^[:space:]]\{1,\}\)/"\1"/g;s/[[:space:]]\{1,\}/,/g')
          echo "packages=$PACKAGES" >> $GITHUB_ENV
          echo "output packages: $PACKAGES"
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Prepare download folder
        run: mkdir download
      - name: Add symlink for libffi.so.6
        run: ln -sfn /usr/lib/arm-linux-gnueabihf/libffi.so.7.1.0 /usr/lib/arm-linux-gnueabihf/libffi.so.6
      - name: Install build dependencies
        run: |
          apt update
          apt-get install rustc -y
          apt-get install libtiff5 libjpeg-dev libopenjp2-7 cmake libdbus-1-dev -y
          pyenv global ${{ matrix.python-version }}
          python -m pip install wheel
          pip3 install wheel
          apt-get install -y --no-install-recommends python3-dev libdbus-glib-1-dev libgirepository1.0-dev libcairo2-dev
          apt-get install -y --no-install-recommends dbus-tests
      - name: Get branch name
        run: |
          INPUT=${{ github.event.inputs.IDF_branch }}
          if [ -z "$INPUT" ]; then
            echo "IDF_branch=main" >> $GITHUB_ENV
          else
            echo IDF_branch=${{ github.event.inputs.IDF_branch }} >> $GITHUB_ENV
          fi
      - name: Build wheels for IDF ${{ env.IDF_branch }} branch
        env:
          PIP_EXTRA_INDEX_URL: "https://www.piwheels.org/simple"
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          $env:PATH+=":/root/.cargo/bin"
          rustc --version
          if ( "${{ inputs.packages }}" ) {
            .\Build-Wheels.ps1  -Branch ${{ env.IDF_branch }} -NoReq -CompileWheels @(${{ env.packages }})
          } else {
            # Cython==3.0.0 breaks the build of gevent. The build environment from https://github.com/gevent/gevent/blob/1.5.0/pyproject.toml
            # must be patched with "cython<3"
            .\Build-Wheels.ps1  -Branch ${{ env.IDF_branch }} -BuildEnv @("setuptools", "wheel", "cython<3", "cffi") -CompileWheels @("gevent==1.5.0")
            .\Build-Wheels.ps1  -Branch ${{ env.IDF_branch }} -CompileWheels @("cryptography", "python-pkcs11")
          }
      - name: Copy cached wheels
        run: cp -u `pip cache list --format=abspath` download
      - name: Test wheels by installation
        shell: pwsh
        run: |
          if ( "${{ inputs.packages }}" ) {
            .\Test-Wheels.ps1 -Branch ${{ env.IDF_branch }} -TestWheels @(${{ env.packages }})
          } else {
            .\Test-Wheels.ps1 -Branch ${{ env.IDF_branch }}
          }
      - name: Upload Release Asset To test s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_BUCKET: ${{ secrets.DL_BUCKET }}
          PREFIX: 'pypi'
        shell: bash
        run: |
          chmod +x Upload-Wheels.sh
          ./Upload-Wheels.sh $AWS_BUCKET
          python3 create_index_pages.py $AWS_BUCKET
      - name: Drop AWS cache
        id: invalidate-index-cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CACHE_INVALIDATION }} --paths "/pypi/*"
