name: ubuntu-dispatch

on:
  schedule:
     - cron: '0 0 * * 0,3'
  workflow_dispatch:
    inputs:
      IDF_branch:
        description: 'Wheels will be built for this branch'
        required: false
        default: 'master'

jobs:
  build-python-wheels:
    name: Build Python Wheels for ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7.15', '3.8.12', '3.9.15', '3.10.8']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Install stable Rust with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
         profile: default
         toolchain: stable
         components: rustfmt, clippy
      - name: Rust version
        run: rustc --version
      - name: Prepare download folder
        run: mkdir download
      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt-get install cmake libdbus-1-dev -y
      - name: Install build dependencies
        run: python3 -m pip install wheel
      - name: Get python3 version
        run: python3 --version
      - name: Get branch name
        run: |
          echo INPUT=${{ github.event.inputs.IDF_branch }}
          if [ -z "$INPUT" ]; then
            echo "IDF_branch=main" >> $GITHUB_ENV
          else
            echo IDF_branch=${{ github.event.inputs.IDF_branch }} >> $GITHUB_ENV
          fi
      - name: Build wheels for IDF ${{ env.IDF_branch }} branch
        shell: pwsh
        run: .\Build-Wheels.ps1  -Branch ${{ env.IDF_branch }} -CompileWheels @("greenlet==1.0.0", "gevent==1.5.0", "cryptography", "python-pkcs11")
      - name: Test wheels by installation
        shell: pwsh
        run: .\Test-Wheels.ps1 -Branch ${{ env.IDF_branch }}
      - name: Upload Release Asset To test s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_BUCKET: ${{ secrets.DL_BUCKET }}
          PREFIX: 'pypi'
        shell: bash
        run: |
          chmod +x Upload-Wheels.sh
          ./Upload-Wheels.sh $AWS_BUCKET
          pip3 install boto3
          python3 create_index_pages.py $AWS_BUCKET
      - name: Drop AWS cache
        id: invalidate-index-cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CACHE_INVALIDATION }} --paths "/pypi/*"